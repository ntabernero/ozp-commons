/* 
   Copyright 2013 Next Century Corporation 

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package org.ozoneplatform.commons.server.persistence.mongo.mappers

/**
 * Pattern: http://www.martinfowler.com/eaaCatalog/dataMapper.html
 * Document Mappers contain the logic for mapping data between Mongo
 * documents Domain Entities. Relating to JPA, these classes would be
 * generated by orm.xml or corresponding annotations on domain classes
 * @param T The Entity type being mapped e.g. Person
 */
abstract class DocumentMapper<T> {

    /**
     * Tried to take this class definition as a type parameter but that doesn't
     * work with Groovy since it discards meta data about strongly typed type parameters
     * @param entityType The Entity type being mapped e.g. Person
     */
    DocumentMapper(Class entityType) {
        this.entityType = entityType
    }

    abstract def toDocument(T entity)

    abstract T fromDocument(def document)

    /**
     * For reporting which type of entity this mapper instance maps
     * @return Entity type
     */
    final Class entityType

    /**
     * This will be a property of the mongo document to discriminate
     * different types of entities in the document collection
     *
     * @return String type to be stored in the document
     */
    String getMongoType() {
        entityType.simpleName
    }

    protected def toBsonDate(Calendar cal) {
        if (cal)
            cal.getTime()
    }

    protected def fromBsonDate(def date) {
        if (date) {
            Calendar cal = Calendar.instance
            cal.setTime(date)
            return cal
        }
    }
}
