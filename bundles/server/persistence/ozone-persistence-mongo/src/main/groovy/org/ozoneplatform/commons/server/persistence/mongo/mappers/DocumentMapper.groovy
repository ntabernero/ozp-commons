/* 
   Copyright 2013 Next Century Corporation 

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package org.ozoneplatform.commons.server.persistence.mongo.mappers

/**
 * Pattern: http://www.martinfowler.com/eaaCatalog/dataMapper.html
 * Document Mappers contain the logic for mapping data between Mongo
 * documents Domain Entities. Relating to JPA, these classes would be
 * generated by orm.xml or corresponding annotations on domain classes
 * @param T The Entity type being mapped e.g. Person
 */
abstract class DocumentMapper<TEntity, TProxy extends TEntity> {

    /**
     * Tried to take this class definition as a type parameter but that doesn't
     * work with Groovy since it discards meta data about strongly typed type parameters
     * @param entityType The Entity type being mapped e.g. Person
     * @param proxyType the Proxy type created for the Entity type
     */
    DocumentMapper(Class entityType, Class proxyType) {
        this.entityType = entityType
        this.proxyType = proxyType
    }

    /**
     * Creates a new Mongo document to insert into the collection
     * @param entity the pure entity to convert to document
     * @return GMongo document map
     */
    abstract def toInsertDocument(TEntity entity)

    /**
     * Creates an Mongo update document which sets the fields which have
     * been changed. The Proxy class will eventually keep track of the
     * fields that change so only those will be updated. For now, just
     * replace the whole document to update
     * @param proxy Dirty proxy object which holds changes to be persisted
     * @return A Mongo document which will be passed as the <update> argument
     * on a Mongo update command
     */
    def toUpdateDocument(TProxy proxy) {
        toInsertDocument(proxy)
    }

    /**
     * Create a new proxy instance from a Mongo document
     * This will use the proxy's setters to instantiate the proxy
     * so the unit of work must be registered with proxy post-initialization
     * @param document The GMongo document map
     * @return Proxy object
     */
    abstract TProxy fromDocument(def document)

    /**
     * For reporting which type of entity this mapper instance maps
     * @return Entity type
     */
    final Class entityType

    /**
     * For reporting which Proxy type this mapper instantiates
     * @return Proxy type
     */
    final Class proxyType

    /**
     * This will be a property of the mongo document to discriminate
     * different types of entities in the document collection
     *
     * @return String type to be stored in the document
     */
    String getMongoType() {
        entityType.simpleName
    }

    protected def toBsonDate(Calendar cal) {
        if (cal)
            cal.getTime()
    }

    protected def fromBsonDate(def date) {
        if (date) {
            Calendar cal = Calendar.instance
            cal.setTime(date)
            return cal
        }
    }
}
